{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter OutputFlag unchanged\n",
      "   Value: 1  Min: 0  Max: 1  Default: 1\n",
      "Changed value of parameter QCPDual to 1\n",
      "   Prev: 0  Min: 0  Max: 1  Default: 0\n",
      "Optimize a model with 29454 rows, 29076 columns and 39526 nonzeros\n",
      "Model has 3 quadratic constraints\n",
      "Variable types: 28886 continuous, 190 integer (0 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+00]\n",
      "  QMatrix range    [1e+00, 1e+00]\n",
      "  Objective range  [1e+00, 1e+00]\n",
      "  Bounds range     [0e+00, 0e+00]\n",
      "  RHS range        [1e+00, 2e+02]\n",
      "Solve qcp for cone disaggregation ...\n",
      "Presolve removed 27724 rows and 27295 columns\n",
      "Presolve time: 0.65s\n",
      "Presolved: 1731 rows, 3491 columns, 5171 nonzeros\n",
      "Variable types: 1713 continuous, 1778 integer (1252 binary)\n",
      "Presolve time: 0.72s\n",
      "Presolved: 8737 rows, 6941 columns, 19045 nonzeros\n",
      "Presolved model has 1712 second-order cone constraints\n",
      "Root barrier log...\n",
      "\n",
      "Ordering time: 0.00s\n",
      "\n",
      "Barrier statistics:\n",
      " Dense cols : 11\n",
      " AA' NZ     : 5.453e+04\n",
      " Factor NZ  : 7.903e+04 (roughly 7 MBytes of memory)\n",
      " Factor Ops : 1.368e+06 (less than 1 second per iteration)\n",
      " Threads    : 1\n",
      "\n",
      "                  Objective                Residual\n",
      "Iter       Primal          Dual         Primal    Dual     Compl     Time\n",
      "   0   3.42570611e+02  3.93845995e+01  1.67e+05 2.58e-01  1.55e+01     1s\n",
      "   1   1.65760765e+02 -2.20247890e+02  2.71e+04 2.84e-07  2.26e+00     1s\n",
      "   2   1.25034201e+02 -1.71493415e+02  4.84e+03 1.13e-08  4.31e-01     1s\n",
      "   3   1.12845864e+02 -1.05125003e+02  1.76e+03 1.25e-14  1.63e-01     1s\n",
      "   4   1.04790338e+02 -1.45918226e+01  3.49e+02 2.66e-15  4.26e-02     1s\n",
      "   5   9.83605511e+01  6.94226365e+01  1.56e+02 2.89e-15  1.29e-02     1s\n",
      "   6   9.75068539e+01  9.11232233e+01  5.87e+01 4.72e-15  4.30e-03     1s\n",
      "   7   9.76602832e+01  9.42844349e+01  3.69e+01 3.22e-15  2.64e-03     1s\n",
      "   8   9.83638033e+01  9.69035357e+01  2.43e+01 6.55e-15  1.67e-03     1s\n",
      "   9   9.96627030e+01  1.00136076e+02  1.31e+01 1.95e-14  7.78e-04     1s\n",
      "  10   1.01018576e+02  1.01551788e+02  7.44e+00 2.99e-14  4.60e-04     1s\n",
      "  11   1.02005838e+02  1.02811517e+02  4.01e+00 1.06e-13  1.90e-04     1s\n",
      "  12   1.02930233e+02  1.03233544e+02  1.65e+00 3.85e-13  9.63e-05     1s\n",
      "  13   1.03452845e+02  1.03442106e+02  1.60e-01 2.74e-13  1.75e-05     1s\n",
      "  14   1.03467472e+02  1.03469737e+02  3.86e-02 1.49e-12  3.30e-06     1s\n",
      "  15   1.03471493e+02  1.03471324e+02  2.76e-03 6.88e-12  2.99e-07     1s\n",
      "  16   1.03471821e+02  1.03471855e+02  6.50e-04 5.63e-11  5.65e-08     1s\n",
      "  17   1.03471824e+02  1.03471854e+02  6.49e-04 1.07e-10  5.62e-08     1s\n",
      "  18   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     1s\n",
      "  19   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  20   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  21   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  22   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  23   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  24   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  25   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "  26   1.03471824e+02  1.03471854e+02  6.49e-04 1.21e-10  5.63e-08     2s\n",
      "\n",
      "Barrier solved model in 26 iterations and 1.97 seconds\n",
      "Optimal objective 1.03471824e+02\n",
      "\n",
      "Warning: failed to compute QCP dual solution due to inaccurate barrier solution\n",
      "         Try decreasing BarQCPConvTol for more accuracy\n",
      "\n",
      "\n",
      "Root relaxation: objective 1.034718e+02, 0 iterations, 1.30 seconds\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0  103.47182    0 1298          -  103.47182      -     -    2s\n",
      "H    0     0                     176.8156950  103.47182  41.5%     -    2s\n",
      "     0     0  103.47182    0 1298  176.81569  103.47182  41.5%     -    3s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -    4s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -    5s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -    7s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -    7s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -    9s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   10s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   12s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   12s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   14s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   14s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   16s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   17s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   18s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   19s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   21s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   21s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   23s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   24s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   26s\n",
      "     0     0  103.47230    0 1298  176.81569  103.47230  41.5%     -   26s\n",
      "     0     2  103.47230    0 1274  176.81569  103.47230  41.5%     -   29s\n",
      "     1     5  103.63587    1 1228  176.81569  103.47230  41.5%   0.0   39s\n",
      "     3     6  103.85855    2 1161  176.81569  103.63587  41.4%   0.0   49s\n",
      "     5     8  104.05422    3 1100  176.81569  103.63587  41.4%   0.0   60s\n",
      "     7    10  104.18661    4 1052  176.81569  103.63587  41.4%   0.0   68s\n",
      "     9    11  104.30635    5 1030  176.81569  103.63587  41.4%   0.0   79s\n",
      "    11    12  104.45181    6  953  176.81569  103.63587  41.4%   0.0   82s\n",
      "    13    14  104.61410    6 1003  176.81569  103.63587  41.4%   0.0   85s\n",
      "    18    19  104.70500    8  851  176.81569  103.63587  41.4%   0.0   97s\n",
      "    20    20  104.81604    9  850  176.81569  103.63587  41.4%   0.0  101s\n",
      "H   27    28                     106.1680848  103.63587  2.39%   0.0  107s\n",
      "    29    30  105.09333   12  618  106.16808  103.63587  2.39%   0.0  111s\n",
      "    35    33  105.33086   16  478  106.16808  103.63587  2.39%   0.0  116s\n",
      "H   43    37                     106.1334722  103.63587  2.35%   0.0  118s\n",
      "    46    41  105.89758   21  226  106.13347  103.63587  2.35%   0.0  125s\n",
      "*   55    42              26     106.1334109  103.63587  2.35%   0.0  127s\n",
      "    60    46     cutoff   24       106.13341  103.85855  2.14%   0.0  134s\n",
      "    63    46  104.14253    3 1150  106.13341  103.85855  2.14%   0.0  137s\n",
      "    66    51  104.34831    4 1075  106.13341  103.85855  2.14%   0.0  141s\n",
      "    69    52  104.69510    6  947  106.13341  103.85855  2.14%   0.0  145s\n",
      "    71    51  104.84279    7  922  106.13341  103.85855  2.14%   0.0  152s\n",
      "    79    53  105.10197    9  820  106.13341  103.85855  2.14%   0.0  167s\n",
      "    85    56  105.18378   10  716  106.13341  103.85855  2.14%   0.0  175s\n",
      "    88    59  105.49225   10  716  106.13341  103.85855  2.14%   0.0  186s\n",
      "    92    60  105.35027   12  618  106.13341  103.85855  2.14%   0.0  190s\n",
      "    95    66  105.73340   13  569  106.13341  103.85855  2.14%   0.0  199s\n",
      "    98    65  105.81223   14  520  106.13341  103.85855  2.14%   0.0  206s\n",
      "   107    68     cutoff   19       106.13341  104.05422  1.96%   0.0  211s\n",
      "   119    77  104.34832    4 1075  106.13341  104.05422  1.96%   0.0  217s\n",
      "   125    74  104.84302    7  896  106.13341  104.05422  1.96%   0.0  225s\n",
      "   136    80  105.20432   10  714  106.13341  104.05422  1.96%   0.0  237s\n",
      "   139    83  105.36838   12  646  106.13341  104.05422  1.96%   0.0  245s\n",
      "   143    91  105.56837   15  470  106.13341  104.05422  1.96%   0.0  253s\n"
     ]
    }
   ],
   "source": [
    "import cvxpy\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "dataset = pd.ExcelFile('D01_P001_view.xlsx')\n",
    "requested_data = pd.read_excel(dataset, 'requested')\n",
    "picked_data = pd.read_excel(dataset, 'picked')\n",
    "used_data = pd.read_excel(dataset, 'used')\n",
    "returned_data = pd.read_excel(dataset, 'returned')\n",
    "\n",
    "number_of_items, number_of_operations = requested_data.shape\n",
    "number_of_operations -= 3\n",
    "\n",
    "requested_data = requested_data.fillna(0)\n",
    "picked_data = picked_data.fillna(0)\n",
    "used_data = used_data.fillna(0)\n",
    "returned_data = returned_data.fillna(0)\n",
    "\n",
    "# Constructing the request matrix\n",
    "A = np.transpose(np.array(requested_data)[:, 3:].astype(np.int))\n",
    "\n",
    "# Constructing the usage matrix\n",
    "B = np.transpose(np.array(used_data)[:, 3:].astype(np.int))\n",
    "\n",
    "# Constructing the return matrix\n",
    "D = A - B\n",
    "R = 0.5 * (np.abs(D) + D)\n",
    "\n",
    "# Constructing the dynamic request matrix\n",
    "E = 0.5 * (np.abs(D) - D)\n",
    "\n",
    "# Determining the request cost, dynamic request cost, return cost\n",
    "# C = np.random.rand(number_of_items, 1)\n",
    "# C_d = np.random.rand(number_of_items, 1)\n",
    "\n",
    "C = np.array([1]*number_of_items)\n",
    "C_d = np.array([1]*number_of_items)\n",
    "C_r = np.array([1]*number_of_items)\n",
    "\n",
    "C_d_matrix = np.zeros((number_of_operations + 1, number_of_items))\n",
    "C_r_matrix = np.zeros((number_of_operations + 1, number_of_items))\n",
    "\n",
    "for i in range(number_of_operations + 1):\n",
    "    C_d_matrix[i] = C_d\n",
    "    C_r_matrix[i] = C_r\n",
    "\n",
    "# Definition of the upper bound and lower bound for X\n",
    "upper_bound = np.zeros((number_of_items, 1))\n",
    "lower_bound = np.zeros((number_of_items, 1))\n",
    "\n",
    "for i in range(B.shape[1]):\n",
    "    upper_bound[i, 0] = max(B[:, i])\n",
    "    lower_bound[i, 0] = min(B[:, i])\n",
    "\n",
    "# Definition of optimization variable\n",
    "X = cvxpy.Variable((number_of_items, 1),  integer=True)\n",
    "\n",
    "# Definition of the objective function\n",
    "f1 = cvxpy.matmul(np.transpose(C), X)\n",
    "\n",
    "Chi_rows = []\n",
    "for i in range(B.shape[0]):\n",
    "    Chi_rows.append(X.T)\n",
    "Chi = cvxpy.vstack(Chi_rows)\n",
    "\n",
    "f2 = cvxpy.norm(B - Chi, 'fro')\n",
    "\n",
    "f_x = X - lower_bound\n",
    "g_x = upper_bound - X\n",
    "\n",
    "R_new = cvxpy.vstack([R, f_x.T])\n",
    "R_new = cvxpy.multiply(R_new, C_r_matrix)\n",
    "\n",
    "E_new = cvxpy.vstack([E, g_x.T])\n",
    "E_new = cvxpy.multiply(E_new, C_d_matrix)\n",
    "\n",
    "f3 = cvxpy.norm(R_new, 'fro')\n",
    "f4 = cvxpy.norm(E_new, 'fro')\n",
    "\n",
    "objective = cvxpy.Minimize(f1 + f2 + f3 + f4)\n",
    "constraints = [X>=0,X <= upper_bound, X >= lower_bound, sum(X) <= 200]\n",
    "\n",
    "problem = cvxpy.Problem(objective, constraints)\n",
    "problem.solve(solver=cvxpy.GUROBI, verbose=True)\n",
    "print('[*] Minimum of the objective function')\n",
    "print(problem.value)\n",
    "print('[*] Optimum X vector')\n",
    "print(X.value.astype(np.int))\n",
    "\n",
    "# for i in range(number_of_operations):\n",
    "#     print('\\t', sum(X.value - B[i, :].reshape(B.shape[1], 1)))\n",
    "ans = np.concatenate((X.value.astype(np.int), B[-1, :].reshape(-1, 1)), axis=1)\n",
    "print('[*] Comparison between the last use vector and the optimized vector (left: optimum, right: last operation')\n",
    "print(ans)\n",
    "print(sum(X.value.astype(np.int) - B[-1, :].reshape(B.shape[1], 1)))\n",
    "\n",
    "print('[*] The average used items')\n",
    "print(np.round(np.mean(B, axis=0)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
